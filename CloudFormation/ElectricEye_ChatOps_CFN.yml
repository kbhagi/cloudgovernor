#This file is part of ElectricEye.
#SPDX-License-Identifier: Apache-2.0

#Licensed to the Apache Software Foundation (ASF) under one
#or more contributor license agreements.  See the NOTICE file
#distributed with this work for additional information
#regarding copyright ownership.  The ASF licenses this file
#to you under the Apache License, Version 2.0 (the
#"License"); you may not use this file except in compliance
#with the License.  You may obtain a copy of the License at

#http://www.apache.org/licenses/LICENSE-2.0

#Unless required by applicable law or agreed to in writing,
#software distributed under the License is distributed on an
#"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
#KIND, either express or implied.  See the License for the
#specific language governing permissions and limitations
#under the License.
AWSTemplateFormatVersion: 2010-09-09
Description: This Template will create the supporting infrastructure for the ElectricEye-ChatOps module to send Security Hub findings to Slack
Metadata:
  License: Apache-2.0
Parameters:
  SSMParameterName:
    Type: String
    Description: The name of the SSM Parameter that contains the Slack App Webhook URL for ElectricEye-ChatOps
Resources:
  ElectricEyeChatOpsRRLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ElectricEye-ChatOps-Slack
      Description: Sends the results of high-severity ElectricEye findings to a Slack Channel - Managed by CloudFormation
      Handler: index.lambda_handler
      MemorySize: 256
      Role: !GetAtt ElectricEyeChatOpsExecRole.Arn
      Runtime: python3.7
      Timeout: 60
      Environment:
        Variables:
          SSM_PARAMETER_NAME: !Ref SSMParameterName
      Code:
        ZipFile: |
          import os
          import boto3
          import json
          import requests

          def lambda_handler(event, context):
              # create ssm client
              ssm = boto3.client('ssm')
              # create env var for SSM Parameter containing Slack Webhook URL
              ssm_parameter_name = os.environ['SSM_PARAMETER_NAME']
              bot_token = ""
              slack_channel_id = ""
              slack_icon_emoji = ':see_no_evil:'
              slack_user_name = 'ElectricEye'
              try:
                  response = ssm.get_parameter(Name=ssm_parameter_name)
                  response_object = str(response['Parameter']['Value'])
                  response_object_dict = json.loads(response_object)
                  bot_token = response_object_dict.get('bot_token')
                  slack_channel_id = response_object_dict.get("slack_channel_id")

              except Exception as e:
                  print(e)

              for findings in event['detail']['findings']:
                  if findings.get("Compliance").get("Status") == "FAILED":
                      severityLabel = findings['Severity']['Label']
                      title = findings['Title']
                      awsAccountId = findings['AwsAccountId']
                      for resources in findings['Resources']:
                          resourceId = resources['Id']
                          resourceType = resources['Type']
                          resourceRegion = resources['Region']
                          blocks = [
                              {
                                  "type": "header",
                                  "text": {
                                      "type": "plain_text",
                                      "text": "Finding"
                                  }
                              },
                              {
                                  "type": "section",
                                  "fields": [
                                      {
                                          "type": "mrkdwn",
                                          "text": "*Resource:* " + resourceId
                                      },
                                      {
                                          "type": "mrkdwn",
                                          "text": "*Resource Type:* " + resourceType
                                      }
                                  ]
                              },
                              {
                                  "type": "section",
                                  "fields": [
                                      {
                                          "type": "mrkdwn",
                                          "text": "*Region:* " + resourceRegion
                                      },
                                      {
                                          "type": "mrkdwn",
                                          "text": "*Time:* " + event.get("time")
                                      }
                                  ]
                              },
                              {
                                  "type": "section",
                                  "fields": [
                                      {
                                          "type": "mrkdwn",
                                          "text": "*Account:* " + awsAccountId
                                      },
                                      {
                                          "type": "mrkdwn",
                                          "text": "*Compliance Status:* " + findings.get("Compliance").get("Status")
                                      }
                                  ]
                              },
                              {
                                  "type": "section",
                                  "fields": [
                                      {
                                          "type": "mrkdwn",
                                          "text": "*Severity:* " + severityLabel
                                      },
                                      {
                                          "type": "mrkdwn",
                                          "text": "*FindingId:* " + findings.get("Id")
                                      },

                                  ]
                              },
                              {
                                  "type": "section",
                                  "text": {
                                      "type": "mrkdwn",
                                      "text": "*Check:* " + title
                                  }
                              },
                              {
                                  "type": "section",
                                  "text": {
                                      "type": "mrkdwn",
                                      "text": "<" + findings.get('Remediation').get('Recommendation').get(
                                          'Url') + "|*Recommendation:* " + findings.get('Remediation').get('Recommendation').get(
                                          'Text') + ">"
                                  }
                              }
                          ]
                          slack_payload = {
                              'token': bot_token,
                              'channel': slack_channel_id,
                              'text': "ElectricEye",
                              'icon_emoji': slack_icon_emoji,
                              'username': slack_user_name,
                              'blocks': json.dumps(blocks) if blocks else None
                          }
                          status = requests.post('https://slack.com/api/chat.postMessage', slack_payload).json()
                          print(status)


                  else:
                      print("Compliance Status is either passed or None " + findings.get("Compliance").get(
                          "Status") + " for " + findings.get("Id"))
  ElectricEyeChatOpsExecRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: ElectricEye-ChatOps-RolePolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - ssm:GetParameter
            - ssm:GetParameters
            Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal: { Service: lambda.amazonaws.com }
          Action:
          - sts:AssumeRole
  ElectricEyeChatOpsEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: ElectricEye-ChatOps-CWE
      Description: "Sends the results of high-severity ElectricEye findings to a Slack Channel via Lambda - Managed by CloudFormation"
      EventPattern:
        source:
          - aws.securityhub
        detail-type:
          - Security Hub Findings - Imported
        detail:
          findings:
            ProductFields:
              Product Name:
                - ElectricEye
            Severity:
              Label:
                - HIGH
                - CRITICAL
      State: "ENABLED"
      Targets:
        -
          Arn:
            Fn::GetAtt:
              - "ElectricEyeChatOpsRRLambdaFunction"
              - "Arn"
          Id: "ElectricEye_ChatOps_CWE"
  ElectricEyeChatOpsRRCWEPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: "ElectricEyeChatOpsRRLambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
          - "ElectricEyeChatOpsEventRule"
          - "Arn"